# ===================================================================
# 服务器配置 - 定义应用的基本运行环境
# ===================================================================
server:
  # 应用监听端口
  port: 18882
  servlet:
    # API请求的基础路径，所有接口都会以/api开头
    context-path: /api
    encoding:
      # 请求和响应的字符编码
      charset: UTF-8
      # 强制使用配置的字符编码
      force: true
  tomcat:
    # Tomcat编码设置
    uri-encoding: UTF-8
    # Tomcat工作线程最大数量，影响并发处理能力
    max-threads: 200
    # 连接超时时间(毫秒)，超过此时间未收到请求则关闭连接
    connection-timeout: 5000

# ===================================================================
# Spring配置 - Spring框架及其组件的核心配置
# ===================================================================
spring:
  application:
    # 应用名称
    name: coder-ai-boot
  profiles:
    active: local

  # ===================================================================
  # 数据库配置 - 关系型数据库连接和连接池设置
  # ===================================================================
  datasource:
    # MySQL驱动类
    driver-class-name: com.mysql.cj.jdbc.Driver
    # 数据库连接URL，包含字符集、时区和安全配置
    url: jdbc:mysql://localhost:3306/coder-devnotehub?useUnicode=true&useSSL=false&characterEncoding=utf8&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true
    # 数据库用户名
    username: root
    # 数据库密码
    password: gzm2001..
    # 使用Druid作为连接池实现
    type: com.alibaba.druid.pool.DruidDataSource
    # Druid连接池详细配置
    druid:
      # 初始连接数
      initial-size: 5
      # 最小空闲连接数
      min-idle: 5
      # 最大活跃连接数，影响并发处理能力
      max-active: 20
      # 获取连接等待超时时间(毫秒)
      max-wait: 60000
      # 连接检查间隔时间(毫秒)
      time-between-eviction-runs-millis: 60000
      # 连接在池中最小生存时间(毫秒)
      min-evictable-idle-time-millis: 300000
      # 用于检测连接是否有效的SQL
      validation-query: SELECT 1
      # 空闲时是否检测连接有效性
      test-while-idle: true
      # 获取连接时是否检测有效性
      test-on-borrow: false
      # 归还连接时是否检测有效性
      test-on-return: false
      # 是否缓存PreparedStatement，提高SQL执行效率
      pool-prepared-statements: true
      # 每个连接最大PreparedStatement缓存数
      max-pool-prepared-statement-per-connection-size: 20
      # 启用的过滤器，stat用于统计，wall用于防SQL注入
      filters: stat,wall
      # 连接属性配置
      connection-properties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
      # Druid监控页面配置
      stat-view-servlet:
        # 是否启用监控页面
        enabled: true
        # 监控页面路径
        url-pattern: /druid/*
        # 监控页面登录用户名
        login-username: admin
        # 监控页面登录密码
        login-password: admin
        # 允许访问的IP，为空则允许所有
        allow: 127.0.0.1
      # Web请求监控过滤器配置
      web-stat-filter:
        # 是否启用Web请求监控
        enabled: true
        # 监控路径
        url-pattern: /*
        # 不监控的资源类型
        exclusions: "*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*"


  # ===================================================================
  # 文件上传配置 - 控制文件上传大小和行为
  # ===================================================================
  servlet:
    multipart:
      # 是否启用文件上传支持
      enabled: true
      # 单个文件最大大小限制
      max-file-size: 20MB
      # 单次请求最大大小限制(包含所有文件)
      max-request-size: 100MB


# ===================================================================
# MyBatis配置 - ORM框架设置
# ===================================================================
mybatis:
  # XML映射文件路径
  mapper-locations: classpath:mapper/**/*.xml
  # 实体类包路径，用于简化XML中的类型引用
  type-aliases-package: org.leocoder.debnote.hub.domain
  # MyBatis运行时行为配置
  configuration:
    # 数据库字段下划线命名自动转为Java驼峰命名
    map-underscore-to-camel-case: true
    # SQL日志实现类，StdOutImpl会打印完整SQL便于调试
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
    # 是否启用二级缓存
    cache-enabled: false
    # 调用setter时是否允许传入null值
    call-setters-on-nulls: true
    # 查询结果为空时是否返回空实例而非null
    return-instance-for-empty-row: true





